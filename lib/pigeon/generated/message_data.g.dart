// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

enum MethodType {
  getPlatformVersion,
  requestMicrophonePermissions,
  requestCameraPermissions,
}

enum AmazonChimeErrorType {
  unknown,
  invalidResponse,
  customError,
}

class StringData {
  StringData({
    required this.result,
    required this.data,
  });

  bool result;

  String data;

  Object encode() {
    return <Object?>[
      result,
      data,
    ];
  }

  static StringData decode(Object result) {
    result as List<Object?>;
    return StringData(
      result: result[0]! as bool,
      data: result[1]! as String,
    );
  }
}

class _RequesterToNativeCodec extends StandardMessageCodec {
  const _RequesterToNativeCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is StringData) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return StringData.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class RequesterToNative {
  /// Constructor for [RequesterToNative].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  RequesterToNative({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _RequesterToNativeCodec();

  Future<StringData> sendMessage(MethodType arg_type) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.amazon_chime_plugin.RequesterToNative.sendMessage', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_type.index]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as StringData?)!;
    }
  }
}

abstract class RequesterToFlutter {
  static const MessageCodec<Object?> codec = StandardMessageCodec();

  static void setup(RequesterToFlutter? api, {BinaryMessenger? binaryMessenger}) {
  }
}
